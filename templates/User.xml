<templateSet group="User">
  <template name="sfc" value="import React, { FC } from 'react';&#10;&#10;interface IProps {&#10;  [x: string]: any;&#10;}&#10;&#10;const $COMPONENT_NAME$: FC&lt;IProps&gt; = (props) =&gt; {&#10;  const {} = props;&#10;&#10;  return (&#10;    &lt;&gt;&lt;/&gt;&#10;  );&#10;};&#10;&#10;$COMPONENT_NAME$.defaultProps = {&#10;&#10;};&#10;" description="React functional componetn" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="saga" value="import { put, select, takeLatest } from 'redux-saga/effects';&#10;import { getAuthToken } from '~/shared';&#10;&#10;/**&#10; * Remove these placeholder actions when saga is complete&#10; */&#10;const successAction = () =&gt; ({ type: '', data: '' });&#10;const errorAction = (ex: any) =&gt; ({ type: '', data: '' });&#10;&#10;function* sagaWorker(action) {&#10;  try {&#10;    const { data } = action;&#10;&#10;    const token: string = yield select(getAuthToken);&#10;&#10;    return yield put(successAction());&#10;  } catch (ex) {&#10;    console.error(ex);&#10;    return yield put(errorAction(ex));&#10;  }&#10;}&#10;&#10;function* newSaga() {&#10;  yield takeLatest(['PLACEHOLDER_ACTION'], sagaWorker);&#10;}&#10;&#10;export default newSaga;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>